vs JSPs

- Alias wird im Template definiert
- Zugriffe gehen immer auf Strings oder Alias-"Funtionenen", im Java keine Bean zugriff -> Refactoringsave
- Methoden als Funktionen durch Coede vorgegeben
- Alles ist definiert
- Es sind Zusicherung leicht möglich
	ala: in mind. einem href steht der Wert hinter <path> 
- Das Markup entscheidet, welche Funktion um einen Wert gewickelt wird, indem ein entsprechender 
  Alias gebunden wird. Alle Bedingungen etc. gehen dann über die Aliasse.
	-> Code muss keine Zusatzwerte für spezielles Markup bereithalten -> Grandios
- Namespaces: Jedes Tag stellt einen Namespace dar, der wie in Java auch in inneren Tags verdeckt
  werden kann (Name-shadowing)
  
Matcher:
Findet im 'case' attribut statt

		<alias>?		leer/nicht definiert ? ---> predicate
exists	<alias>		same as above - exists hat den operator '?'
(indexIn)	<alias>#1..3	match elemente 1-3 einer Listen-Property - die funktion indexIn hat den operator '#'
		<alias>#2		match element #2 
		<alias>#..2		match alle bis inkl. dem 2.
		<alias>#2..		match alle ab inkl. dem 2.
odd		<alias>		match alle ungeraden indices
even		<alias>		match alle geraden indices
<name>	<alias>		match über die funktion <name>
else/otherwise			match wenn alle muster auf selber ebene vorher nicht gemacht haben
	
Functor useage in a case:	
::<alias>			der wert (String) den der alias aktuell hat (bei Listen der des aktuellen elements)
::<alias>#			der index des aktuellen elements (beginnend mit 1 [default])
::<alias>#0			der index (beginnend mit 0)

::<alias>[x]		das element auf index x
::<alias>[+n]		das n'te element vor dem aktuellen
::<alias>[-n]		das n'te element nach dem aktuellen
::<alias>[foo]		das element mit dem key/namen 'foo'

::<alias>{..4}		Die ersten 4 zeichen des werts
::<alias>{2..4}		Die Zeichen 2-4 des Werts
::<alias>{2..}		Alle zeichen ab inkl. dem 2. des Werts

::<alias>[x]{4}		beispiel-kombination: die ersten 4 zeichen von element auf X


Globals (Environment):
env is a predefined alias.
@env.now
@env.today

Properties:
Berechnete Werte werden im Java Properties zugeordnet. Diese sind ebenso global und unter 'data' vordefiniert. 

Define new Vars:
Findet im 'def' attribut statt

<alias> <functor> (<alias>|<property>)
def="x as each @y"
def="x as each @data.property"
def="x as @data.propery"
def="x as 'a string'"
def="x as ['a string', 'another']"
def="x as [1->'Herr', 2->'Frau']"
def="x as 1.4"
def="x is/as true"
def="x as nothing"

def="x is <case-expr>" ---> boolean nach 'is' wie in case
def="x as ..." ---> assignment 

!!!!man könnte auch mit einem functor anfangen - def nimmt nur den ersten string bis zu einem whitespace und alles weitere ist das argument dieses functors. --> genereller weg -> sehr flexibel
def="var x = y" // var ist hier der name des funktors 'x = y' wird als argument übergeben -> nice!
def="var x is each y"
 

wie geht bis zum vorletzten ? 1:n-1 ??

- The var defined can be prefixed with an @ or not.
- References to previous defined vars are done by @<var-name>
- String-Constants are done with single quotes: 'a string'
- List use []- inside the list any other constant can be used- elements separated by ,
- -> can be used to define key->value pairs - key is becomes varname.key, value becomes varname.value 
- Number constants are done by starting with a digit or dot ('.')
- boolean constants are done by just true or false
- nothing can be referenced by nothing (useful to override a var in an inner context)
- Functions are all names different from true/false/nothing -> let them be functions to avoid special case! 
- Multiple definitions inside one def-attribute separated by ;

Werte:
1. einfache Werte (direkt als String darstellbar)
2. Listen von einfachen Werten
3. objekte (bestehen wiederrum aus 1-3)



OPEN datumsformate ?

